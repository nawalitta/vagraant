<?php

namespace Proxies\__CG__\CalendarBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class EventEntity extends \CalendarBundle\Entity\EventEntity implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'title', 'enfant', 'activite', 'url', 'jour', 'bgColor', 'fgColor', 'cssClass', 'startDatetime', 'endDatetime', 'otherFields'];
        }

        return ['__isInitialized__', 'id', 'title', 'enfant', 'activite', 'url', 'jour', 'bgColor', 'fgColor', 'cssClass', 'startDatetime', 'endDatetime', 'otherFields'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (EventEntity $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setBgColor($color)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBgColor', [$color]);

        return parent::setBgColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getBgColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBgColor', []);

        return parent::getBgColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setFgColor($color)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFgColor', [$color]);

        return parent::setFgColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getFgColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFgColor', []);

        return parent::getFgColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setCssClass($class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCssClass', [$class]);

        return parent::setCssClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function getCssClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCssClass', []);

        return parent::getCssClass();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartDatetime(\DateTime $start)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartDatetime', [$start]);

        return parent::setStartDatetime($start);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartDatetime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartDatetime', []);

        return parent::getStartDatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndDatetime(\DateTime $end)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndDatetime', [$end]);

        return parent::setEndDatetime($end);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndDatetime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndDatetime', []);

        return parent::getEndDatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function addField($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addField', [$name, $value]);

        return parent::addField($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeField($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeField', [$name]);

        return parent::removeField($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setJour($jour)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJour', [$jour]);

        return parent::setJour($jour);
    }

    /**
     * {@inheritDoc}
     */
    public function getJour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJour', []);

        return parent::getJour();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnfant(\RessourceBundle\Entity\Enfant $enfant)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnfant', [$enfant]);

        return parent::setEnfant($enfant);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnfant()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnfant', []);

        return parent::getEnfant();
    }

    /**
     * {@inheritDoc}
     */
    public function setActivite(\ActiviteBundle\Entity\Activite $activite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActivite', [$activite]);

        return parent::setActivite($activite);
    }

    /**
     * {@inheritDoc}
     */
    public function getActivite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivite', []);

        return parent::getActivite();
    }

}
